global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

        maxconn 50000
defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

        # adds client ip to the end of packet x-forwarded-for
        option forwardfor except 127.0.0.1

frontend ssl_pass_through
        mode tcp
        bind :443

        tcp-request inspect-delay 5s
        tcp-request content accept if { req.ssl_hello_type 1 }

        use_backend rke2_kubernetes_backend if { req.ssl_sni -i expressjs.ferozfaiz.com }
        use_backend rke2_kubernetes_backend if { req.ssl_sni -i reactjs.ferozfaiz.com }
        use_backend rke2_kubernetes_backend if { req.ssl_sni -i angular.ferozfaiz.com }
        use_backend rke2_kubernetes_backend if { req.ssl_sni -i django-rest-framework.ferozfaiz.com }
        use_backend rke2_kubernetes_backend if { req.ssl_sni -i ferozfaiz.com } # django default

        default_backend null_backend

backend rke2_kubernetes_backend
        mode tcp
        server node1 NODE-IP check check-ssl inter 60s verify none
        server node2 NODE-IP check check-ssl inter 60s verify none
        server node3 NODE-IP check check-ssl inter 60s verify none

backend null_backend
  mode http
  option http-server-close

